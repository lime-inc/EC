{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/scaffold/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {runGoExtensionsCLI} from '../../utilities/extensions/cli.js'\nimport {\n  blocks,\n  extensionTypeCategory,\n  ExtensionTypes,\n  getExtensionOutputConfig,\n  getUIExtensionRendererDependency,\n  ThemeExtensionTypes,\n  UIExtensionTypes,\n  FunctionExtensionTypes,\n  versions,\n  ExternalExtensionTypes,\n} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {mapExtensionTypeToExternalExtensionType} from '../../utilities/extensions/name-mapper.js'\nimport {error, file, git, path, string, template, ui, yaml, environment} from '@shopify/cli-kit'\nimport {addNPMDependenciesIfNeeded, DependencyVersion} from '@shopify/cli-kit/node/node-package-manager'\nimport {fileURLToPath} from 'url'\nimport stream from 'node:stream'\n\nasync function getTemplatePath(name: string): Promise<string> {\n  const templatePath = await path.findUp(`templates/${name}`, {\n    cwd: path.dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n  if (templatePath) {\n    return templatePath\n  } else {\n    throw new error.Bug(`Couldn't find the template ${name} in @shopify/app.`)\n  }\n}\n\ninterface ExtensionInitOptions<\n  TExtensionTypes extends ExtensionTypes = ExtensionTypes,\n  TExternalExtensionTypes extends ExternalExtensionTypes = ExternalExtensionTypes,\n> {\n  name: string\n  extensionType: TExtensionTypes\n  externalExtensionType: TExternalExtensionTypes\n  app: AppInterface\n  cloneUrl?: string\n  extensionFlavor?: string\n}\ninterface ExtensionDirectory {\n  extensionDirectory: string\n}\n\ntype FunctionExtensionInitOptions = ExtensionInitOptions<FunctionExtensionTypes> & ExtensionDirectory\ntype UIExtensionInitOptions = ExtensionInitOptions<UIExtensionTypes> & ExtensionDirectory\ntype ThemeExtensionInitOptions = ExtensionInitOptions<ThemeExtensionTypes> & ExtensionDirectory\n\nasync function extensionInit(options: ExtensionInitOptions): Promise<string> {\n  const extensionDirectory = await ensureExtensionDirectoryExists({app: options.app, name: options.name})\n  switch (extensionTypeCategory(options.extensionType)) {\n    case 'theme':\n      await themeExtensionInit({...(options as ThemeExtensionInitOptions), extensionDirectory})\n      break\n    case 'function':\n      await functionExtensionInit({...(options as FunctionExtensionInitOptions), extensionDirectory})\n      break\n    case 'ui':\n      await uiExtensionInit({...(options as UIExtensionInitOptions), extensionDirectory})\n      break\n  }\n  return extensionDirectory\n}\n\nasync function themeExtensionInit({name, app, extensionType, extensionDirectory}: ThemeExtensionInitOptions) {\n  const templatePath = await getTemplatePath('theme-extension')\n  await template.recursiveDirectoryCopy(templatePath, extensionDirectory, {name, extensionType})\n}\n\nasync function uiExtensionInit({\n  name,\n  extensionType,\n  externalExtensionType,\n  app,\n  extensionFlavor,\n  extensionDirectory,\n}: UIExtensionInitOptions) {\n  const list = ui.newListr(\n    [\n      {\n        title: 'Install additional dependencies',\n        task: async (_, task) => {\n          task.title = 'Installing additional dependencies...'\n          const requiredDependencies = getRuntimeDependencies({extensionType})\n          await addNPMDependenciesIfNeeded(requiredDependencies, {\n            packageManager: app.packageManager,\n            type: 'prod',\n            directory: app.directory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n          })\n          task.title = 'Dependencies installed'\n        },\n      },\n      {\n        title: `Scaffold ${getExtensionOutputConfig(extensionType).humanKey} extension`,\n        task: async (_, task) => {\n          task.title = `Scaffolding ${getExtensionOutputConfig(extensionType).humanKey} extension...`\n          const input = yaml.encode({\n            extensions: [\n              {\n                title: name,\n                // Use the new templates\n                external_type: mapExtensionTypeToExternalExtensionType(extensionType),\n                type: extensionType,\n                metafields: [],\n                development: {\n                  root_dir: '.',\n                  template: extensionFlavor,\n                  install_dependencies: false,\n                },\n              },\n            ],\n          })\n          await runGoExtensionsCLI(['create', '-'], {\n            cwd: extensionDirectory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            input,\n          })\n          task.title = `${getExtensionOutputConfig(extensionType).humanKey} extension scaffolded`\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n}\n\nexport function getRuntimeDependencies({\n  extensionType,\n}: Pick<UIExtensionInitOptions, 'extensionType'>): DependencyVersion[] {\n  switch (extensionType) {\n    case 'product_subscription':\n    case 'checkout_ui_extension':\n    case 'pos_ui_extension':\n    case 'web_pixel_extension':\n    case 'customer_accounts_ui_extension':\n    case 'checkout_post_purchase': {\n      const dependencies: DependencyVersion[] = [{name: 'react', version: versions.react}]\n      const rendererDependency = getUIExtensionRendererDependency(extensionType)\n      if (rendererDependency) {\n        dependencies.push(rendererDependency)\n      }\n      return dependencies\n    }\n  }\n}\n\nasync function functionExtensionInit(options: FunctionExtensionInitOptions) {\n  const url = options.cloneUrl || blocks.functions.defaultUrl\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = path.join(tmpDir, 'download')\n\n    await ui.task({\n      title: `Scaffolding ${getExtensionOutputConfig(options.extensionType).humanKey} extension...`,\n      task: async () => {\n        await file.mkdir(templateDownloadDir)\n        await git.downloadRepository({\n          repoUrl: url,\n          destination: templateDownloadDir,\n          shallow: true,\n        })\n        const origin = path.join(templateDownloadDir, functionTemplatePath(options))\n        await template.recursiveDirectoryCopy(origin, options.extensionDirectory, options)\n        const configYamlPath = path.join(options.extensionDirectory, 'script.config.yml')\n        if (await file.exists(configYamlPath)) {\n          await file.remove(configYamlPath)\n        }\n        return {\n          successMessage: `${getExtensionOutputConfig(options.extensionType).humanKey} extension scaffolded`,\n        }\n      },\n    })\n  })\n}\n\nfunction functionTemplatePath({extensionType, extensionFlavor}: FunctionExtensionInitOptions): string {\n  const lang = extensionFlavor || blocks.functions.defaultLanguage\n  switch (extensionType) {\n    case 'product_discounts':\n      return `discounts/${lang}/product-discounts/default`\n    case 'order_discounts':\n      return `discounts/${lang}/order-discounts/default`\n    case 'shipping_discounts':\n      return `discounts/${lang}/shipping-discounts/default`\n    case 'payment_customization':\n      return `checkout/${lang}/payment-customization/default`\n    case 'shipping_rate_presenter':\n      return `checkout/${lang}/shipping-rate-presenter/default`\n  }\n}\n\nasync function ensureExtensionDirectoryExists({name, app}: {name: string; app: AppInterface}): Promise<string> {\n  const hyphenizedName = string.hyphenize(name)\n  const extensionDirectory = path.join(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await file.exists(extensionDirectory)) {\n    throw new error.Abort(\n      `\\nA directory with this name (${hyphenizedName}) already exists.\\nChoose a new name for your extension.`,\n    )\n  }\n  await file.mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nexport default extensionInit\n"]}