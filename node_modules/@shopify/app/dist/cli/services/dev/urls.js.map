{"version":3,"file":"urls.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/urls.ts"],"names":[],"mappings":"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","sourcesContent":["import {updateURLsPrompt} from '../../prompts/dev.js'\nimport {api, error, output, plugins, store} from '@shopify/cli-kit'\nimport {Config} from '@oclif/core'\n\nexport interface PartnersURLs {\n  applicationUrl: string\n  redirectUrlWhitelist: string[]\n}\n\nexport async function generateURL(config: Config, frontendPort: number): Promise<string> {\n  // For the moment we assume to always have ngrok, this will change in a future PR\n  // and will need to use \"getListOfTunnelPlugins\" to find the available tunnel plugins\n  const result = await plugins.runTunnelPlugin(config, frontendPort, 'ngrok')\n\n  if (result.error === 'multiple-urls') throw new error.Bug('Multiple tunnel plugins for ngrok found')\n  if (result.error === 'no-urls' || !result.url) throw new error.Bug('Ngrok failed to start the tunnel')\n  output.success('The tunnel is running and you can now view your app')\n  return result.url\n}\n\nexport function generatePartnersURLs(baseURL: string): PartnersURLs {\n  return {\n    applicationUrl: baseURL,\n    redirectUrlWhitelist: [\n      `${baseURL}/auth/callback`,\n      `${baseURL}/auth/shopify/callback`,\n      `${baseURL}/api/auth/callback`,\n    ],\n  }\n}\n\nexport async function updateURLs(urls: PartnersURLs, apiKey: string, token: string): Promise<void> {\n  const variables: api.graphql.UpdateURLsQueryVariables = {apiKey, ...urls}\n  const query = api.graphql.UpdateURLsQuery\n  const result: api.graphql.UpdateURLsQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n}\n\nexport async function getURLs(apiKey: string, token: string): Promise<PartnersURLs> {\n  const variables: api.graphql.GetURLsQueryVariables = {apiKey}\n  const query = api.graphql.GetURLsQuery\n  const result: api.graphql.GetURLsQuerySchema = await api.partners.request(query, token, variables)\n  return {applicationUrl: result.app.applicationUrl, redirectUrlWhitelist: result.app.redirectUrlWhitelist}\n}\n\nexport interface ShouldOrPromptUpdateURLsOptions {\n  currentURLs: PartnersURLs\n  appDirectory: string\n  cachedUpdateURLs?: boolean\n  newApp?: boolean\n}\n\nexport async function shouldOrPromptUpdateURLs(options: ShouldOrPromptUpdateURLsOptions): Promise<boolean> {\n  if (options.newApp) return true\n  let shouldUpdate: boolean = options.cachedUpdateURLs === true\n  if (options.cachedUpdateURLs === undefined) {\n    output.info(`\\nYour app's URL currently is:\\n  ${options.currentURLs.applicationUrl}`)\n    output.info(`\\nYour app's redirect URLs currently are:`)\n    options.currentURLs.redirectUrlWhitelist.forEach((url) => output.info(`  ${url}`))\n    output.newline()\n    const response = await updateURLsPrompt()\n    let newUpdateURLs: boolean | undefined\n    /* eslint-disable no-fallthrough */\n    switch (response) {\n      case 'always':\n        newUpdateURLs = true\n      case 'yes':\n        shouldUpdate = true\n        break\n      case 'never':\n        newUpdateURLs = false\n      case 'no':\n        shouldUpdate = false\n    }\n    /* eslint-enable no-fallthrough */\n    await store.setAppInfo({directory: options.appDirectory, updateURLs: newUpdateURLs})\n  }\n  return shouldUpdate\n}\n"]}