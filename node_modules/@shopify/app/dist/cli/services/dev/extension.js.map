{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/extension.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,kBAAkB,EAAC,MAAM,mCAAmC,CAAA;AACpE,OAAO,EAAC,eAAe,EAAC,MAAM,6CAA6C,CAAA;AAC3E,OAAO,EAAQ,IAAI,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAmEpD,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,OAA4B;IAC9D,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,EAAC,kBAAkB,EAAE,IAAI,EAAE,GAAG,OAAO,EAAC,CAAC,CAAA;IAC5E,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA;EAC3B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;CAC1B,CAAC,CAAA;IACA,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;IACjC,MAAM,kBAAkB,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;QACvC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS;QAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,KAAK;KACN,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {UIExtension} from '../../models/app/extensions.js'\nimport {runGoExtensionsCLI} from '../../utilities/extensions/cli.js'\nimport {extensionConfig} from '../../utilities/extensions/configuration.js'\nimport {error, yaml, output} from '@shopify/cli-kit'\nimport {Writable} from 'node:stream'\n\nexport interface ExtensionDevOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal: error.AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * The extension to be built.\n   */\n  extensions: UIExtension[]\n\n  /**\n   * The app that contains the extension.\n   */\n  app: AppInterface\n\n  /**\n   * The app identifier\n   */\n  apiKey: string\n\n  /**\n   * URL where the extension is locally served from. It's usually the tunnel URL\n   */\n  url: string\n\n  /**\n   * The port where the extension is hosted.\n   * It's usually the tunnel port\n   */\n  port: number\n\n  /**\n   * The development store where the extension wants to be previewed\n   */\n  storeFqdn: string\n\n  /**\n   * Product variant ID, used for checkout_ui_extensions\n   * If that extension is present, this is mandatory\n   */\n  cartUrl?: string\n\n  /**\n   * Subscription product URL, used for subscription_ui_extensions\n   * If not provided the first product in the store will be used\n   */\n  subscriptionProductUrl?: string\n}\n\nexport async function devExtensions(options: ExtensionDevOptions): Promise<void> {\n  const config = await extensionConfig({includeResourceURL: true, ...options})\n  output.debug(output.content`Dev'ing extension with configuration:\n${output.token.json(config)}\n`)\n  const input = yaml.encode(config)\n  await runGoExtensionsCLI(['serve', '-'], {\n    cwd: options.app.directory,\n    signal: options.signal,\n    stdout: options.stdout,\n    stderr: options.stderr,\n    input,\n  })\n}\n"]}