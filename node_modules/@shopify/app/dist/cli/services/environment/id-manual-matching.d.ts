import { ExtensionRegistration } from '../dev/create-extension.js';
import { IdentifiersExtensions } from '../../models/app/identifiers.js';
import { Extension } from '../../models/app/extensions.js';
export declare type ManualMatchResult = {
    result: 'ok';
    identifiers: IdentifiersExtensions;
    toCreate: Extension[];
} | {
    result: 'pending-remote';
};
/**
 * Prompt the user to manually match each of the local extensions to a remote extension.
 * The user can also select to create a new remote extension instead of selecting an existing one.
 * Manual matching will only show extensions of the same type as possible matches.
 * At the end of this process, all remote extensions must be matched to suceed.
 * @param localExtensions {Extension[]} The local extensions to match
 * @param remoteExtensions {ExtensionRegistration[]} The remote extensions to match
 * @returns {Promise<ManualMatchResult>} The result of the manual matching
 */
export declare function manualMatchIds(localExtensions: Extension[], remoteExtensions: ExtensionRegistration[]): Promise<ManualMatchResult>;
export declare function selectRegistrationPrompt(extension: Extension, registrations: ExtensionRegistration[]): Promise<ExtensionRegistration>;
