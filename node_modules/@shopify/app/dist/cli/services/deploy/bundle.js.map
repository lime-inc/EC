{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/bundle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAE,sBAAsB,EAAE,iBAAiB,EAAC,MAAM,uBAAuB,CAAA;AAGrG,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAQ,MAAM,kBAAkB,CAAA;AAC1D,OAAO,EAAC,GAAG,EAAC,MAAM,gCAAgC,CAAA;AAWlD,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,OAAsB;IAC7E,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QACnD,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;QACjC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAA;QAExD,MAAM,MAAM,CAAC,UAAU,CAAC;YACtB;gBACE,MAAM,EAAE,kBAAkB;gBAC1B,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAyB,EAAE,EAAE;oBAC9E,MAAM,oBAAoB,CAAC;wBACzB,GAAG,EAAE,OAAO,CAAC,GAAG;wBAChB,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK;wBACxC,MAAM;wBACN,MAAM;wBACN,MAAM;qBACP,CAAC,CAAA;gBACJ,CAAC;aACF;YACD;gBACE,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAyB,EAAE,EAAE;oBAC9E;;;uBAGG;oBACH,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;wBAC7D,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,CAAE,CAAA;wBAC9E,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAA;wBAC9D,OAAO,EAAC,GAAG,SAAS,EAAE,cAAc,EAAC,CAAA;oBACvC,CAAC,CAAC,CAAA;oBACF,MAAM,iBAAiB,CAAC;wBACtB,GAAG,EAAE,OAAO,CAAC,GAAG;wBAChB,UAAU;wBACV,MAAM;wBACN,MAAM;wBACN,MAAM;qBACP,CAAC,CAAA;gBACJ,CAAC;aACF;YACD,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE;gBAC3D,OAAO;oBACL,MAAM,EAAE,YAAY,iBAAiB,CAAC,eAAe,EAAE;oBACvD,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAyB,EAAE,EAAE;wBAC9E,MAAM,sBAAsB,CAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAC,CAAC,CAAA;oBAC7F,CAAC;iBACF,CAAA;YACH,CAAC,CAAC;SACH,CAAC,CAAA;QAEF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,MAAM,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,UAAU,CAAC,CAAA;SAC/C;IACH,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {buildThemeExtensions, buildFunctionExtension, buildUIExtensions} from '../build/extension.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {Identifiers} from '../../models/app/identifiers.js'\nimport {path, output, file, error} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\n\nimport {Writable} from 'node:stream'\n\ninterface BundleOptions {\n  app: AppInterface\n  bundlePath: string\n  identifiers: Identifiers\n  bundle: boolean\n}\n\nexport async function bundleUIAndBuildFunctionExtensions(options: BundleOptions) {\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const bundleDirectory = path.join(tmpDir, 'bundle')\n    await file.mkdir(bundleDirectory)\n    await file.touch(path.join(bundleDirectory, '.shopify'))\n\n    await output.concurrent([\n      {\n        prefix: 'theme_extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          await buildThemeExtensions({\n            app: options.app,\n            extensions: options.app.extensions.theme,\n            stdout,\n            stderr,\n            signal,\n          })\n        },\n      },\n      {\n        prefix: 'extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          /**\n           * For deployment we want the build process to ouptut the artifacts directly in the directory\n           * to prevent artifacts from past builds from leaking into deploy builds.\n           */\n          const extensions = options.app.extensions.ui.map((extension) => {\n            const extensionId = options.identifiers.extensions[extension.localIdentifier]!\n            const buildDirectory = path.join(bundleDirectory, extensionId)\n            return {...extension, buildDirectory}\n          })\n          await buildUIExtensions({\n            app: options.app,\n            extensions,\n            stdout,\n            stderr,\n            signal,\n          })\n        },\n      },\n      ...options.app.extensions.function.map((functionExtension) => {\n        return {\n          prefix: `function_${functionExtension.localIdentifier}`,\n          action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n            await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app: options.app})\n          },\n        }\n      }),\n    ])\n\n    if (options.bundle) {\n      await zip(bundleDirectory, options.bundlePath)\n    }\n  })\n}\n"]}