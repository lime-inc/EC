{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/upload.ts"],"names":[],"mappings":"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","sourcesContent":["import {themeExtensionConfig as generateThemeExtensionConfig} from './theme-extension-config.js'\nimport {Identifiers, IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {FunctionExtension, ThemeExtension} from '../../models/app/extensions.js'\nimport {blocks} from '../../constants.js'\nimport {api, error, session, http, id, output, file} from '@shopify/cli-kit'\n\nimport fs from 'fs'\n\ninterface DeployThemeExtensionOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** Set of local identifiers */\n  identifiers: Identifiers\n\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n}\n\n/**\n * Uploads theme extension(s)\n * @param options {DeployThemeExtensionOptions} The upload options\n */\n\nexport async function uploadThemeExtensions(\n  themeExtensions: ThemeExtension[],\n  options: DeployThemeExtensionOptions,\n): Promise<void> {\n  const {apiKey, identifiers, token} = options\n  await Promise.all(\n    themeExtensions.map(async (themeExtension) => {\n      const themeExtensionConfig = await generateThemeExtensionConfig(themeExtension)\n      const themeId = identifiers.extensionIds[themeExtension.localIdentifier]!\n      const themeExtensionInput: api.graphql.ExtensionUpdateDraftInput = {\n        apiKey,\n        config: JSON.stringify(themeExtensionConfig),\n        context: undefined,\n        registrationId: themeId,\n      }\n      const mutation = api.graphql.ExtensionUpdateDraftMutation\n      const result: api.graphql.ExtensionUpdateSchema = await api.partners.request(mutation, token, themeExtensionInput)\n      if (result.extensionUpdateDraft?.userErrors?.length > 0) {\n        const errors = result.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n        throw new error.Abort(errors)\n      }\n    }),\n  )\n}\n\ninterface UploadUIExtensionsBundleOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** The path to the bundle file to be uploaded */\n  bundlePath: string\n\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n\n  /** Extensions extra data */\n  extensions: api.graphql.ExtensionSettings[]\n}\n\nexport interface UploadExtensionValidationError {\n  uuid: string\n  errors: {\n    message: string\n    field: string[]\n  }[]\n}\n\n/**\n * Uploads a bundle.\n * @param options {UploadUIExtensionsBundleOptions} The upload options\n */\nexport async function uploadUIExtensionsBundle(\n  options: UploadUIExtensionsBundleOptions,\n): Promise<UploadExtensionValidationError[]> {\n  const deploymentUUID = id.generateRandomUUID()\n  const signedURL = await getUIExtensionUploadURL(options.apiKey, deploymentUUID)\n\n  const formData = http.formData()\n  const buffer = fs.readFileSync(options.bundlePath)\n  formData.append('my_upload', buffer)\n  await http.fetch(signedURL, {\n    method: 'put',\n    body: buffer,\n    headers: formData.getHeaders(),\n  })\n\n  const variables: api.graphql.CreateDeploymentVariables = {\n    apiKey: options.apiKey,\n    uuid: deploymentUUID,\n    bundleUrl: signedURL,\n    extensions: options.extensions,\n  }\n\n  const mutation = api.graphql.CreateDeployment\n  const result: api.graphql.CreateDeploymentSchema = await api.partners.request(mutation, options.token, variables)\n\n  if (result.deploymentCreate?.userErrors?.length > 0) {\n    const errors = result.deploymentCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  const validationErrors = result.deploymentCreate.deployment.deployedVersions\n    .filter((ver) => ver.extensionVersion.validationErrors.length > 0)\n    .map((ver) => {\n      return {uuid: ver.extensionVersion.registrationUuid, errors: ver.extensionVersion.validationErrors}\n    })\n  return validationErrors\n}\n\n/**\n * It generates a URL to upload an app bundle.\n * @param apiKey {string} The application API key\n * @param deploymentUUID {string} The unique identifier of the deployment.\n * @returns\n */\nexport async function getUIExtensionUploadURL(apiKey: string, deploymentUUID: string) {\n  const mutation = api.graphql.GenerateSignedUploadUrl\n  const token = await session.ensureAuthenticatedPartners()\n  const variables: api.graphql.GenerateSignedUploadUrlVariables = {\n    apiKey,\n    deploymentUuid: deploymentUUID,\n    bundleFormat: 1,\n  }\n\n  const result: api.graphql.GenerateSignedUploadUrlSchema = await api.partners.request(mutation, token, variables)\n  if (result.deploymentGenerateSignedUploadUrl?.userErrors?.length > 0) {\n    const errors = result.deploymentGenerateSignedUploadUrl.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  return result.deploymentGenerateSignedUploadUrl.signedUploadUrl\n}\n\ninterface UploadFunctionExtensionsOptions {\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n\n  // Set of local identifiers\n  identifiers: Identifiers\n}\n\n/**\n * This function takes a list of function extensions and uploads them.\n * As part of the upload it creates a function server-side if it does not exist\n * and includes its remote identifier in the returned identifiers instance.\n * If the function already has a local id, that one is used and the upload\n * does an override of the function existing server-side.\n *\n * @param extensions {FunctionExtension[]} The list of extensions to upload.\n * @param options {UploadFunctionExtensionsOptions} Options to adjust the upload.\n * @returns {Promise<Identifiers>} A promise that resolves with the identifiers.\n */\nexport async function uploadFunctionExtensions(\n  extensions: FunctionExtension[],\n  options: UploadFunctionExtensionsOptions,\n): Promise<Identifiers> {\n  let identifiers = options.identifiers\n\n  const functionIds: IdentifiersExtensions = {}\n\n  // Functions are uploaded sequentially to avoid reaching the API limit\n  for (const extension of extensions) {\n    // eslint-disable-next-line no-await-in-loop\n    const remoteIdentifier = await uploadFunctionExtension(extension, {\n      apiKey: options.identifiers.app,\n      token: options.token,\n      identifier: identifiers.extensions[extension.localIdentifier],\n    })\n    functionIds[extension.localIdentifier] = remoteIdentifier\n  }\n\n  identifiers = {\n    ...identifiers,\n    extensions: {\n      ...identifiers.extensions,\n      ...functionIds,\n    },\n  }\n\n  return identifiers\n}\n\ninterface UploadFunctionExtensionOptions {\n  apiKey: string\n  identifier?: string\n  token: string\n}\n\nasync function uploadFunctionExtension(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n): Promise<string> {\n  const {url, headers} = await getFunctionExtensionUploadURL({apiKey: options.apiKey, token: options.token})\n  headers['Content-Type'] = 'application/wasm'\n\n  let inputQuery: string | undefined\n  if (await file.exists(extension.inputQueryPath())) {\n    inputQuery = await file.read(extension.inputQueryPath())\n  }\n\n  const functionContent = fs.readFileSync(extension.buildWasmPath())\n  await http.fetch(url, {body: functionContent, headers, method: 'PUT'})\n  await compileFunctionExtension(extension, options, url)\n\n  const query = api.graphql.AppFunctionSetMutation\n  const variables: api.graphql.AppFunctionSetVariables = {\n    // NOTE: This is a shim to support CLI projects that currently use the UUID instead of the ULID\n    ...(options.identifier?.includes('-') ? {legacyUuid: options.identifier} : {id: options.identifier}),\n    title: extension.configuration.name,\n    description: extension.configuration.description,\n    apiType: extension.configuration.type,\n    apiVersion: extension.configuration.apiVersion,\n    inputQuery,\n    appBridge: extension.configuration.ui?.paths\n      ? {\n          detailsPath: extension.configuration.ui.paths.details,\n          createPath: extension.configuration.ui.paths.create,\n        }\n      : undefined,\n    moduleUploadUrl: url,\n  }\n\n  const res: api.graphql.AppFunctionSetMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  const userErrors = res.data.functionSet.userErrors ?? []\n  if (userErrors.length !== 0) {\n    const errorMessage = output.content`The deployment of functions failed with the following errors:\n${output.token.json(userErrors)}\n    `\n    throw new error.Abort(errorMessage)\n  }\n  return res.data.functionSet.function?.id as string\n}\n\nasync function compileFunctionExtension(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n  moduleUploadUrl: string,\n): Promise<void> {\n  const query = api.graphql.CompileModuleMutation\n  const variables: api.graphql.CompileModuleMutationVariables = {\n    moduleUploadUrl,\n  }\n  const res: api.graphql.CompileModuleMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  const jobId = res.data.compileModule.jobId\n\n  await waitForCompilation(extension, options, jobId)\n}\n\nasync function getCompilationStatus(options: UploadFunctionExtensionOptions, compilationJobId: string) {\n  const query = api.graphql.ModuleCompilationStatusQuery\n  const variables: api.graphql.ModuleCompilationQueryVariables = {\n    jobId: compilationJobId,\n  }\n  const res: api.graphql.ModuleCompilationStatusQuerySchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  return res.data.moduleCompilationStatus.status\n}\n\nasync function waitForCompilation(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n  compilationJobId: string,\n) {\n  let retries = 0\n\n  const poll = async (): Promise<void> => {\n    const compilationStatus = await getCompilationStatus(options, compilationJobId)\n    // eslint-disable-next-line no-empty\n    if (compilationStatus === 'completed') {\n    } else if (compilationStatus !== 'pending') {\n      throw new error.Abort(output.content`Function ${extension.localIdentifier} compilation failed.`)\n    } else if (retries < blocks.functions.maxCompilationStatusCheckCount) {\n      retries++\n      return sleep(blocks.functions.compilationStatusWaitMs).then(() => poll())\n    } else {\n      throw new error.Abort(output.content`Function ${extension.localIdentifier} compilation timed out.`)\n    }\n  }\n\n  return poll()\n}\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\ninterface GetFunctionExtensionUploadURLOptions {\n  apiKey: string\n  token: string\n}\n\ninterface GetFunctionExtensionUploadURLOutput {\n  url: string\n  headers: {[key: string]: string}\n}\n\nasync function getFunctionExtensionUploadURL(\n  options: GetFunctionExtensionUploadURLOptions,\n): Promise<GetFunctionExtensionUploadURLOutput> {\n  const query = api.graphql.UploadUrlGenerateMutation\n  const res: api.graphql.UploadUrlGenerateMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n  )\n  return res.data.uploadUrlGenerate\n}\n"]}