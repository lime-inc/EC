{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/build/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {runGoExtensionsCLI} from '../../utilities/extensions/cli.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {UIExtension, FunctionExtension, ThemeExtension} from '../../models/app/extensions.js'\nimport {extensionConfig} from '../../utilities/extensions/configuration.js'\nimport {error, system, yaml, output} from '@shopify/cli-kit'\nimport {execThemeCheckCLI} from '@shopify/cli-kit/node/ruby'\n\nimport {Writable} from 'node:stream'\n\nexport interface ExtensionBuildOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal: error.AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * The app that contains the extensions.\n   */\n  app: AppInterface\n}\n\nexport interface ThemeExtensionBuildOptions extends ExtensionBuildOptions {\n  /**\n   * The UI extensions to be built.\n   */\n  extensions: ThemeExtension[]\n}\n\n/**\n * It builds the theme extensions.\n * @param options {ThemeExtensionBuildOptions} Build options.\n */\nexport async function buildThemeExtensions(options: ThemeExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) return\n  options.stdout.write(`Running theme check on your Theme app extension...`)\n  const themeDirectories = options.extensions.map((extension) => extension.directory)\n  await execThemeCheckCLI({\n    directories: themeDirectories,\n    args: ['-C', ':theme_app_extension'],\n    stdout: options.stdout,\n    stderr: options.stderr,\n  })\n}\n\nexport interface UiExtensionBuildOptions extends ExtensionBuildOptions {\n  /**\n   * The UI extensions to be built.\n   */\n  extensions: UIExtension[]\n}\n\n/**\n * It builds the UI extensions.\n * @param options {UiExtensionBuildOptions} Build options.\n */\nexport async function buildUIExtensions(options: UiExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) {\n    return\n  }\n  options.stdout.write(`Building UI extensions...`)\n  const fullOptions = {...options, extensions: options.extensions, includeResourceURL: false}\n  const configuration = await extensionConfig(fullOptions)\n  output.debug(output.content`Dev'ing extension with configuration:\n${output.token.json(configuration)}\n`)\n  const input = yaml.encode(configuration)\n  await runGoExtensionsCLI(['build', '-'], {\n    cwd: options.app.directory,\n    stdout: options.stdout,\n    stderr: options.stderr,\n    input,\n  })\n}\n\nexport interface BuildFunctionExtensionOptions extends ExtensionBuildOptions {}\n\n/**\n * Builds a function extension\n * @param extension {FunctionExtension} The function extension to build.\n * @param options {BuildFunctionExtensionOptions} Options to configure the build of the extension.\n */\nexport async function buildFunctionExtension(\n  extension: FunctionExtension,\n  options: BuildFunctionExtensionOptions,\n): Promise<void> {\n  const buildCommand = extension.configuration.build?.command\n  if (!buildCommand || buildCommand.trim() === '') {\n    options.stderr.write(\n      `The function extension ${extension.localIdentifier} doesn't have a build command or it's empty`,\n    )\n    options.stderr.write(`\n    Edit the shopify.function.extension.toml configuration file and set how to build the extension.\n\n    [build]\n    command = \"{COMMAND}\"\n\n    Note that the command must output a dist/index.wasm file.\n    `)\n    throw new error.AbortSilent()\n  }\n  const buildCommandComponents = buildCommand.split(' ')\n  options.stdout.write(`Building function ${extension.localIdentifier}...`)\n  await system.exec(buildCommandComponents[0]!, buildCommandComponents.slice(1), {\n    stdout: options.stdout,\n    stderr: options.stderr,\n    cwd: extension.directory,\n    signal: options.signal,\n  })\n}\n"]}