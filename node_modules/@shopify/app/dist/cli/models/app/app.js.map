{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../../src/cli/models/app/app.ts"],"names":[],"mappings":"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","sourcesContent":["import {FunctionExtension, ThemeExtension, UIExtension} from './extensions.js'\nimport {AppErrors} from './loader.js'\nimport {getUIExtensionRendererDependency, UIExtensionTypes} from '../../constants.js'\nimport {path, schema, file} from '@shopify/cli-kit'\nimport {DotEnvFile} from '@shopify/cli-kit/node/dot-env'\nimport {getDependencies, PackageManager, readAndParsePackageJson} from '@shopify/cli-kit/node/node-package-manager'\n\nexport const AppConfigurationSchema = schema.define.object({\n  scopes: schema.define.string().default(''),\n})\n\nexport enum WebType {\n  Frontend = 'frontend',\n  Backend = 'backend',\n}\n\nexport const WebConfigurationSchema = schema.define.object({\n  type: schema.define.enum([WebType.Frontend, WebType.Backend]),\n  commands: schema.define.object({\n    build: schema.define.string().optional(),\n    dev: schema.define.string(),\n  }),\n})\n\nexport type AppConfiguration = schema.define.infer<typeof AppConfigurationSchema>\nexport type WebConfiguration = schema.define.infer<typeof WebConfigurationSchema>\nexport type WebConfigurationCommands = keyof WebConfiguration['commands']\n\nexport interface Web {\n  directory: string\n  configuration: WebConfiguration\n}\n\nexport interface AppInterface {\n  name: string\n  idEnvironmentVariableName: string\n  directory: string\n  packageManager: PackageManager\n  configuration: AppConfiguration\n  configurationPath: string\n  nodeDependencies: {[key: string]: string}\n  webs: Web[]\n  dotenv?: DotEnvFile\n  extensions: {\n    ui: UIExtension[]\n    theme: ThemeExtension[]\n    function: FunctionExtension[]\n  }\n  errors?: AppErrors\n  hasExtensions: () => boolean\n  updateDependencies: () => Promise<void>\n}\n\nexport class App implements AppInterface {\n  name: string\n  idEnvironmentVariableName: string\n  directory: string\n  packageManager: PackageManager\n  configuration: AppConfiguration\n  configurationPath: string\n  nodeDependencies: {[key: string]: string}\n  webs: Web[]\n  dotenv?: DotEnvFile\n  errors?: AppErrors\n  extensions: {\n    ui: UIExtension[]\n    theme: ThemeExtension[]\n    function: FunctionExtension[]\n  }\n\n  // eslint-disable-next-line max-params\n  constructor(\n    name: string,\n    idEnvironmentVariableName: string,\n    directory: string,\n    packageManager: PackageManager,\n    configuration: AppConfiguration,\n    configurationPath: string,\n    nodeDependencies: {[key: string]: string},\n    webs: Web[],\n    ui: UIExtension[],\n    theme: ThemeExtension[],\n    functions: FunctionExtension[],\n    dotenv?: DotEnvFile,\n    errors?: AppErrors,\n  ) {\n    this.name = name\n    this.idEnvironmentVariableName = idEnvironmentVariableName\n    this.directory = directory\n    this.packageManager = packageManager\n    this.configuration = configuration\n    this.configurationPath = configurationPath\n    this.nodeDependencies = nodeDependencies\n    this.webs = webs\n    this.dotenv = dotenv\n    this.extensions = {\n      ui,\n      theme,\n      function: functions,\n    }\n    this.errors = errors\n  }\n\n  async updateDependencies() {\n    const nodeDependencies = await getDependencies(path.join(this.directory, 'package.json'))\n    this.nodeDependencies = nodeDependencies\n  }\n\n  hasExtensions(): boolean {\n    return (\n      this.extensions.ui.length !== 0 || this.extensions.function.length !== 0 || this.extensions.theme.length !== 0\n    )\n  }\n}\n\ntype RendererVersionResult = {name: string; version: string} | undefined | 'not_found'\n\n/**\n * Given a UI extension and the app it belongs to, it returns the version of the renderer package.\n * Looks for `/node_modules/@shopify/{renderer-package-name}/package.json` to find the real version used.\n * @param uiExtensionType {UIExtensionTypes} UI extension whose renderer version will be obtained.\n * @param app {AppInterface} App object containing the extension.\n * @returns {{name: string; version: string} | undefined} The version if the dependency exists.\n */\nexport async function getUIExtensionRendererVersion(\n  uiExtensionType: UIExtensionTypes,\n  app: AppInterface,\n): Promise<RendererVersionResult> {\n  // Look for the vanilla JS version of the dependency (the react one depends on it, will always be present)\n  const rendererDependency = getUIExtensionRendererDependency(uiExtensionType)\n  if (!rendererDependency) return undefined\n\n  const fullName = rendererDependency.name\n  let cwd = app.directory\n  const isReact = fullName.includes('-react')\n\n  /**\n   * PNPM creates a symlink to a global cache where dependencies are hoisted. Therefore\n   * we need to first look up the *-react package and use that as a working directory from\n   * where to look up the non-react package.\n   */\n  if (isReact) {\n    const dependencyName = fullName.split('/')\n    const pattern = path.join('node_modules', dependencyName[0]!, dependencyName[1]!, 'package.json')\n    const reactPackageJsonPath = await path.findUp(pattern, {\n      type: 'file',\n      cwd: app.directory,\n      allowSymlinks: true,\n    })\n    if (!reactPackageJsonPath) {\n      return 'not_found'\n    }\n    cwd = await file.realpath(path.dirname(reactPackageJsonPath))\n  }\n\n  // Split the dependency name to avoid using \"/\" in windows\n  const dependencyName = fullName.replace('-react', '').split('/')\n  const pattern = path.join('node_modules', dependencyName[0]!, dependencyName[1]!, 'package.json')\n\n  let packagePath = await path.findUp(pattern, {\n    cwd,\n    type: 'file',\n    allowSymlinks: true,\n  })\n  if (!packagePath) return 'not_found'\n  packagePath = await file.realpath(packagePath)\n\n  // Load the package.json and extract the version\n  const packageContent = await readAndParsePackageJson(packagePath)\n  if (!packageContent.version) return 'not_found'\n  return {name: fullName, version: packageContent.version}\n}\n"]}