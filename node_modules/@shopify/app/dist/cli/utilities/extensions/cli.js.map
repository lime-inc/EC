{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import {getBinaryPathOrDownload} from './binary.js'\nimport metadata from '../../metadata.js'\nimport {environment, error, path, system} from '@shopify/cli-kit'\nimport {fileURLToPath} from 'url'\nimport {platform} from 'node:os'\n\nconst NodeExtensionsCLINotFoundError = () => {\n  return new error.Bug(`Couldn't find the shopify-cli-extensions Node binary`)\n}\n\n/**\n * This function runs the extensions' CLI and has support for running\n * it through its source code when the SHOPIFY_USE_EXTENSIONS_CLI_SOURCES=1 variable\n * is set.\n * @param args {string[]} Arguments to pass to the CLI\n * @param options {system.ExecOptions} Options to configure the process execution.\n */\nexport async function runGoExtensionsCLI(args: string[], options: system.WritableExecOptions = {}) {\n  const stdout = options.stdout || {write: () => {}}\n  if (environment.local.isDevelopment()) {\n    await metadata.addPublic(() => ({cmd_extensions_binary_from_source: true}))\n    const extensionsGoCliDirectory = (await path.findUp('packages/ui-extensions-go-cli/', {\n      type: 'directory',\n      cwd: path.moduleDirectory(import.meta.url),\n    })) as string\n\n    stdout.write(`Using extensions CLI from ${extensionsGoCliDirectory}`)\n    try {\n      if (environment.local.isDebugGoBinary()) {\n        await system.exec('sh', [path.join(extensionsGoCliDirectory, 'init-debug-session')].concat(args), options)\n      } else {\n        const isWindows = platform() === 'win32'\n        const extension = isWindows ? '.exe' : ''\n        await system.exec(path.join(extensionsGoCliDirectory, `shopify-extensions${extension}`), args, options)\n      }\n    } catch {\n      throw new error.AbortSilent()\n    }\n  } else {\n    await metadata.addPublic(() => ({cmd_extensions_binary_from_source: false}))\n    const binaryPath = await getBinaryPathOrDownload()\n    await system.exec(binaryPath, [...args], options)\n  }\n}\n\n/**\n * The extensions' CLI is comprised by a Go and Node executable. The latter is distributed\n * as an NPM package, @shopify/shopify-cli-extensions, which is dependency of @shopify/app.\n * This method looks up the binary under node_modules/.bin and returns its path.\n * @returns {Promise<string>} A promise that resolves with the path to the Node executable.\n */\nexport async function nodeExtensionsCLIPath(): Promise<string> {\n  const cwd = path.dirname(fileURLToPath(import.meta.url))\n  if (environment.local.isDevelopment()) {\n    return (await path.findUp('packages/ui-extensions-cli/bin/cli.js', {\n      type: 'file',\n      cwd,\n    })) as string\n  } else {\n    const executablePath = await path.findUp('node_modules/@shopify/shopify-cli-extensions/dist/cli.js', {\n      type: 'file',\n      cwd,\n      allowSymlinks: true,\n    })\n    if (!executablePath) {\n      throw NodeExtensionsCLINotFoundError()\n    }\n    return executablePath\n  }\n}\n"]}