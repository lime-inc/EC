{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/configuration.ts"],"names":[],"mappings":"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","sourcesContent":["import {nodeExtensionsCLIPath} from './cli.js'\nimport {mapExtensionTypeToExternalExtensionType} from './name-mapper.js'\nimport {AppInterface, getUIExtensionRendererVersion} from '../../models/app/app.js'\nimport {UIExtension} from '../../models/app/extensions.js'\nimport {UIExtensionTypes} from '../../constants.js'\nimport {error, path} from '@shopify/cli-kit'\n\nconst RendererNotFoundBug = (extension: string) => {\n  return new error.Bug(\n    `Couldn't find renderer version for extension ${extension}`,\n    'Make sure you have all your dependencies up to date',\n  )\n}\nexport interface ExtensionConfigOptions {\n  app: AppInterface\n  apiKey?: string\n  extensions: UIExtension[]\n  buildDirectory?: string\n  url?: string\n  port?: number\n  storeFqdn?: string\n  includeResourceURL?: boolean\n  cartUrl?: string\n  subscriptionProductUrl?: string\n}\n\n/**\n * The extensions' Go binary receives the configuration through\n * standard input as a YAML-encoded object. This function returns the\n * Javascript object representing the configuration necessary for building.\n * @param extension {UIExtension} Extension that will be built.\n * @returns\n */\nexport async function extensionConfig(options: ExtensionConfigOptions): Promise<unknown> {\n  const extensionsConfig = await Promise.all(\n    options.extensions.map(async (extension) => {\n      const renderer = await getUIExtensionRendererVersion(extension.configuration.type, options.app)\n      if (renderer === 'not_found') throw RendererNotFoundBug(extension.configuration.type)\n      return {\n        uuid: extension.devUUID,\n        title: extension.configuration.name,\n        type: `${extension.configuration.type}`,\n        external_type: mapExtensionTypeToExternalExtensionType(extension.configuration.type),\n        metafields: extension.configuration.metafields,\n        extension_points: extension.configuration.extensionPoints || [],\n        node_executable: await nodeExtensionsCLIPath(),\n        surface: getUIExtensionSurface(extension.configuration.type),\n        version: renderer?.version,\n        development: {\n          root_dir: path.relative(options.app.directory, extension.directory),\n          build_dir: options.buildDirectory\n            ? path.relative(extension.directory, options.buildDirectory)\n            : path.relative(extension.directory, extension.buildDirectory),\n          entries: {\n            main: path.relative(extension.directory, extension.entrySourceFilePath),\n          },\n          renderer,\n          resource: options.includeResourceURL\n            ? await getUIExtensionResourceURL(extension.configuration.type, options)\n            : null,\n          build: {\n            env: options.app.dotenv?.variables ?? {},\n          },\n          develop: {\n            env: options.app.dotenv?.variables ?? {},\n          },\n        },\n        capabilities: extension.configuration.capabilities,\n      }\n    }),\n  )\n\n  return {\n    public_url: options.url,\n    port: options.port,\n    store: options.storeFqdn,\n    app: {\n      api_key: options.apiKey,\n    },\n    extensions: extensionsConfig,\n  }\n}\n\nexport async function getUIExtensionResourceURL(uiExtensionType: UIExtensionTypes, options: ExtensionConfigOptions) {\n  switch (uiExtensionType) {\n    case 'checkout_ui_extension':\n      return {url: options.cartUrl}\n    case 'checkout_post_purchase':\n    case 'pos_ui_extension':\n    case 'web_pixel_extension':\n    case 'customer_accounts_ui_extension':\n      // This is a temporary workaround to avoid Admin crash when dev'ing multiple extensions\n      // Issue at shopify/web: https://github.com/Shopify/web/blob/main/app/components/Extensions/hooks/useResourceUrlQuery.ts#L15-L37\n      return {url: 'invalid_url'}\n    case 'product_subscription':\n      return {url: options.subscriptionProductUrl}\n  }\n}\n\nexport function getUIExtensionSurface(uiExtensionType: UIExtensionTypes) {\n  switch (uiExtensionType) {\n    case 'checkout_ui_extension':\n      return 'checkout'\n    case 'checkout_post_purchase':\n      return 'post_purchase'\n    case 'customer_accounts_ui_extension':\n      return 'customer_accounts'\n    case 'pos_ui_extension':\n      return 'pos'\n    case 'product_subscription':\n      return 'admin'\n    case 'web_pixel_extension':\n      // This value is mandatory but is not yet defined for web_pixel\n      return 'unknown'\n  }\n}\n"]}