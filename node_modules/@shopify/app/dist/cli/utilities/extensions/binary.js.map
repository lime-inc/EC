{"version":3,"file":"binary.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/binary.ts"],"names":[],"mappings":"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","sourcesContent":["import {http, file, path, os, error, constants} from '@shopify/cli-kit'\nimport {validateMD5} from '@shopify/cli-kit/node/checksum'\n\nimport zlib from 'node:zlib'\nimport {createWriteStream} from 'node:fs'\nimport {pipeline} from 'node:stream'\nimport {promisify} from 'node:util'\n\nconst SUPPORTED_SYSTEMS = ['darwin amd64', 'darwin arm64', 'linux 386', 'linux amd64', 'windows 386', 'windows amd64']\nconst RELEASE_DOWNLOADS_URL = 'https://github.com/Shopify/cli/releases/download'\n\nexport const UnsupportedPlatformError = ({platform, arch}: {platform: string; arch: string}) => {\n  return new error.Abort(\n    `The current platform ${platform} and architecture ${arch} are not supported for extensions development.`,\n  )\n}\n\nexport async function getBinaryPathOrDownload(): Promise<string> {\n  // Return the path if it already exists\n  const binaryLocalPath = await getBinaryLocalPath()\n  if (await binaryExists()) {\n    return binaryLocalPath\n  }\n\n  const {platform, arch} = os.platformAndArch()\n  const artifact = getArtifactName({platform, arch})\n  validatePlatformSupport({platform, arch})\n\n  return file.inTemporaryDirectory(async (tmpDir) => {\n    const outputBinary = await download({into: tmpDir, artifact})\n    await file.mkdir(path.join(path.dirname(outputBinary)))\n    await file.move(outputBinary, binaryLocalPath, {overwrite: true})\n    await file.chmod(binaryLocalPath, 0o755)\n    return binaryLocalPath\n  })\n}\n\nexport function getArtifactName(options: {platform: string; arch: string}) {\n  const platform = options.platform\n  let artifact = `shopify-extensions-${platform}-${options.arch}`\n  if (platform === 'windows') artifact += '.exe'\n  return artifact\n}\n\nasync function download({into, artifact}: {into: string; artifact: string}): Promise<string> {\n  const assetDownloadUrl = await getReleaseArtifactURL({\n    name: artifact,\n    extension: 'gz',\n  })\n  const response = await http.fetch(assetDownloadUrl)\n  const outputBinary = path.join(into, artifact)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  await promisify(pipeline)(response.body as any, zlib.createGunzip(), createWriteStream(outputBinary))\n\n  const md5DownloadUrl = await getReleaseArtifactURL({\n    name: artifact,\n    extension: 'md5',\n  })\n  await validateMD5({file: outputBinary, md5FileURL: md5DownloadUrl})\n  return outputBinary\n}\n\nexport async function getReleaseArtifactURL({name, extension}: {name: string; extension: string}) {\n  const cliVersion = await constants.versions.cliKit()\n  return `${RELEASE_DOWNLOADS_URL}/${cliVersion}/${name}.${extension}`\n}\n\nexport function validatePlatformSupport({platform, arch}: {platform: string; arch: string}) {\n  if (!SUPPORTED_SYSTEMS.includes(`${platform} ${arch}`)) {\n    throw UnsupportedPlatformError({\n      platform,\n      arch,\n    })\n  }\n}\n\nexport async function ensureBinaryDirectoryExists(): Promise<void> {\n  const binaryPath = await getBinaryLocalPath()\n  await file.mkdir(path.dirname(binaryPath))\n}\n\nexport async function binaryExists(): Promise<boolean> {\n  const binaryPath = await getBinaryLocalPath()\n  return file.exists(binaryPath)\n}\n\nexport async function getBinaryLocalPath(): Promise<string> {\n  const {platform, arch} = os.platformAndArch()\n  const binariesDirectory = constants.paths.directories.cache.vendor.binaries()\n  const extensionsDirectory = path.join(binariesDirectory, 'extensions')\n  const cliVersion = await constants.versions.cliKit()\n  let binaryName = `${cliVersion}-${platform}-${arch}`\n  if (platform === 'windows') {\n    binaryName += '.exe'\n  }\n  return path.join(extensionsDirectory, binaryName)\n}\n"]}